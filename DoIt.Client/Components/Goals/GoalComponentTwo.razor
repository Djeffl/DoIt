@using Models.Goals;
@using DoIt.Client.Components.Progress;
@using DoIt.Client.Components.Buttons;
@using DoIt.Client.Services.Goals;
@using DoIt.Client.Models.Menus;

@inject NavigationManager NavManager
@inject IGoalService GoalService

<article class="goal" @onclick="NavigateGoalDetailPage">
	<section class="goal-top">
		@*<div class="goal-type">
				<GoalTypeIconComponent GoalType="Goal.Type" />
			</div>*@
		<div class="goal-options">
			@*<MoreOptionsMenuButton OptionsMenuList="MenuOptions"  />*@
			@*<OptionsMenuComponent>
				<MenuOptions>
					<MenuOptionComponent Id="remove-goal" Title="Remove Goal" OnClick="RemoveGoal" />
				</MenuOptions>
			</OptionsMenuComponent>*@
		</div>
	</section>
	<section class="goal-center goal-progress">
		<ProgressCircleComponent Completion="0.25" />
	</section>
	<section class="goal-header">
		<header>
			<h1>@Goal.Title</h1>
		</header>
	</section>
	<section class="goal-details">
	</section>
	@*<section class="goal-details">
			<p>Days left: <b>@daysLeftText</b></p>
			<p>Due at: <i>@dueDateText</i></p>
		</section>*@
</article>

@code {
	[Parameter]
	public GoalDto Goal { get; set; }

	private string daysLeftText;
	private string dueDateText;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		daysLeftText = ((int)(Goal.DueAt - DateTime.UtcNow).TotalDays).ToString();
		dueDateText = Goal.DueAt.ToString("d");
	}

	private void NavigateGoalDetailPage()
	{
		NavManager.NavigateTo($"/goals/{Goal.Id}", true);
	}

	private void CompleteGoal()
	{
		Console.WriteLine("Completing goal...");
	}

	private void RemoveGoal()
	{
		Console.WriteLine("Removing goal...");
		//await GoalService.DeleteGoalAsync(Goal.Id);
	}
}