@page "/todos"

@using Models;
@using Services;

@inject ITodoService TodoService;
@inject DoIt.ComponentLibrary.Modal.ModalService ModalService



<h3>Today</h3>

@if (todos == null)
{
	// Spinner Loading
}
else
{
	<section class="todos">
		@foreach (var todo in todos)
		{
			<article class="todo">
				<input type="checkbox" @oninput="() => UpdateTodoIsFinished(todo.Id, !todo.IsFinished)" @bind="todo.IsFinished" class="is-finished" />
				<p @onclick="() => OpenDetailTodo(todo.Id)">@todo.Title</p>
			</article>
		}
	</section>
}


@code {
    private List<Todo> todos;

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetAllAsync();
    }

    private async Task UpdateTodoIsFinished(int id, bool updatedIsFinished)
    {
        //Console.WriteLine($"Updating todo - Id: '{id}. Todo.IsFinished set to {updatedIsFinished}");
        //await Http.PatchAsync($"api/todos/{id}", new StringContent(JsonConvert.SerializeObject(new UpdateTodo { IsFinished = updatedIsFinished }), System.Text.Encoding.UTF8, "application/json-patch+json"));
    }

    private void OpenDetailTodo(int id)
    {
        ModalService.Show("Todo", typeof(DoIt.Client.Pages.TodoDetail));
    }
}
