@page "/goals/create"

@using DoIt.Client.Models.Goals;
@using DoIt.Client.Services.Goals;
@using DoIt.Client.Components.Fields;

@inherits BaseModalComponent<GoalCreateParameter>

@inject IGoalService GoalService

<div class="new-goal">
	<EditForm Model="NewGoal" OnValidSubmit="CreateGoalAsync">
		@* What is this? *@
		<DataAnnotationsValidator />
		<TextField @bind-Value="NewGoal.Title" Label="Title" IsMandatory="true" ValidationFor="@(() => NewGoal.Title)" InitialValue=@NewGoal.Title />
		<div class="description-field">
			<TextField @bind-Value="NewGoal.Description" Label="Description" Multiline="true" Width="450px" ValidationFor="@(() => NewGoal.Description)" InitialValue=@NewGoal.Description />
		</div>
		@*<DateField @bind-Value="NewGoal.DueAt" Label="Due At" IsMandatory="true" ValidationFor="@(() => NewGoal.DueAt)" />*@
		@*<SelectField @bind-Value="NewGoal.Type" Label="Type" Options="options" />*@


		<button class="submit-button" type="submit">Create</button>
	</EditForm>
</div>
@code {
	public GoalCreate NewGoal = new GoalCreate()
	{
		DueAt = DateTime.Now,
	};

	//private List<string> options = ((GoalType[])Enum.GetValues(typeof(GoalType))).Select(t => t.ToString()).ToList();

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Console.WriteLine(JsonConvert.SerializeObject(Parameter));
		if (Parameter != null && Parameter.Idea != null)
		{
			this.NewGoal.IdeaId = Parameter.Idea.Id;
			this.NewGoal.Title = Parameter.Idea.Title;
			this.NewGoal.Description = Parameter.Idea.Description;
		}
	}

	private async Task CreateGoalAsync()
	{
		var response = await GoalService.CreateGoalAsync(NewGoal);

		Console.WriteLine("Closing modal now...");
		this.CloseModal();
	}
}
