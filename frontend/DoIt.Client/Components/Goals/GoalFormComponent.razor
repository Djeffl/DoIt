@using DoIt.Client.Services.IdeaCategories
@using DoIt.Interface.Goals
@using DoIt.Client.Components.Fields;
@using DoIt.Interface.IdeaCategory

@inherits BaseComponent

<EditForm Model="Goal">
    <div class="fields">
        @* What is this? *@
        <DataAnnotationsValidator />
        <div class="field title-field">
            <TextField @bind-Value="Goal.Title" Label="Title" IsMandatory="true" Width="100%"
                       ValidationFor="@(() => Goal.Title)" />
        </div>
        <div class="field description-field">
            <TextField @bind-Value="Goal.Description" Label="Description" Multiline="true" Width="100%"
                       ValidationFor="@(() => Goal.Description)" />
        </div>
        <div class="field location-field">
            <TextField @bind-Value="Goal.Location" Label="Location" Multiline="false" Width="100%"
                       ValidationFor="@(() => Goal.Location)" />
        </div>
        <div class="field reason-field">
            <TextField @bind-Value="Goal.Reason" Label="Reason" Multiline="true" IsMandatory="true" Width="100%"
                       ValidationFor="@(() => Goal.Reason)" />
        </div>
        <div class="field category-field">
            <ChipField @bind-Value="Goal.CategoryNames"
                       Label="Categories"
                       Width="100%"
                       AutocompleteOptions="IdeaCategories.Select(x => x.Name)">
            </ChipField>
        </div>
        <div class="field due-at-field">
            <DateField @bind-Value="Goal.DueAt" Label="Due at" Multiline="false" Width="100%"
                       ValidationFor="@(() => Goal.DueAt)" />
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Models.Goals.GoalFormDto Goal { get; set; }

    [Inject]
    public ICategoryService CategoryService { get; set; }

    public IEnumerable<CategoryDto> IdeaCategories { get; set; } = new List<CategoryDto>();


    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Goal == null)
        {
            throw new ArgumentNullException();
        }
    }

    protected override async Task LoadDataAsync()
    {
        await base.LoadDataAsync();
        IdeaCategories = await GetIdeaCategoriesAsync();
    }

    private async Task<IEnumerable<CategoryDto>> GetIdeaCategoriesAsync()
    {
        var categoriesDto = await CategoryService.GetListAsync();
        return categoriesDto.Data;
    }
}
