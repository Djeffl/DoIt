@inherits ComponentBase
@implements IDisposable

@using DoIt.Client.Models.Modals
@using DoIt.Client.Services.Modals;
@using DoIt.Client.Models.General


@inject ModalService ModalService;
<div>
    <div>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>

    @if (Modals.Any())
    {
        @foreach (var modal in Modals)
        {
            <div class="cascading-modal-wrapper" @onclick="() => CloseModal(modal.Key)">
                <div class="cascading-modal @SetupConfigurationModal(modal.Value.Configuration) cascading-modal-center" @onclick:stopPropagation="true">
                        @modal.Value.Fragment
                    </div>
                </div>
        }
    }

</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    protected override void OnInitialized()
    {
        ModalService.OnShow += ShowModal;
        ModalService.OnClose += CloseModal;
    }

    private Dictionary<Guid, Modal> Modals = new Dictionary<Guid, Modal>();

    public void ShowModal(Modal modal)
    {
        Modals.Add(modal.Id, modal);

        StateHasChanged();
    }

    private void CloseModal(Guid key)
    {
        ModalService.Close(key);
    }

    public void CloseModal(ActionType actionType, object response, Guid key)
    {
        if (Modals.Any())
        {
                Modals.Remove(key);
        }

        StateHasChanged();
    }

    private string SetupConfigurationModal(ModalConfiguration configuration)
    {
        return configuration.FullScreen ? "full-screen" : "pop-up-box";
    }

    public void Dispose()
    {
        ModalService.OnShow -= ShowModal;
        ModalService.OnClose -= CloseModal;
    }
}