@inherits ComponentBase
@implements IDisposable

@using DoIt.Client.Services.Modals;
@using DoIt.Client.Models.General


@inject ModalService ModalService;
<div>
    <div>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>

    @if (IsVisible)
    {
        <div class="cascading-modal-wrapper" @onclick="() => CloseModal()">
            <div class="cascading-modal cascading-modal-center" @onclick:stopPropagation="true">
                <section class="top-modal">
                    <div class="top-modal-title">
                        <h1>@Title</h1>
                    </div>
                    <div class="close-modal">
                        <button @onclick="() => CloseModal()">X</button>
                    </div>
                </section>
                <div class="content-modal">
                    @Content
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public string Title { get; set; }

    protected bool IsVisible { get; set; }
    protected RenderFragment Content { get; set; }

    protected override void OnInitialized()
    {
        ModalService.OnShow += ShowModal;
        ModalService.OnClose += CloseModal;
    }

    public void ShowModal(RenderFragment content, string title)
    {
        Content = content;
        Title = title;
        IsVisible = true;

        StateHasChanged();
    }

    public void CloseModal()
    {
        ModalService.Close();
        CloseModal(ActionType.None, null);
    }

    public void CloseModal(ActionType actionType, object response)
    {
        IsVisible = false;
        Content = null;

        StateHasChanged();
    }

    public void Dispose()
    {
        ModalService.OnShow -= ShowModal;
        ModalService.OnClose -= CloseModal;
    }
}