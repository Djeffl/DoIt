@inherits ComponentBase
@implements IDisposable

@using DoIt.Client.Services.Modals;
@using DoIt.Client.Models.General


@inject ModalService ModalService;
<div>
    <div>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>

    @if (IsVisible)
    {
        <div class="cascading-modal-wrapper" @onclick="() => CloseModal()">
            <div class="cascading-modal cascading-modal-center" @onclick:stopPropagation="true">
                @ModalContent
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    protected bool IsVisible { get; set; }
    protected RenderFragment ModalContent { get; set; }

    protected override void OnInitialized()
    {
        ModalService.OnShow += ShowModal;
        ModalService.OnClose += CloseModal;
    }

    public void ShowModal(RenderFragment content)
    {
        ModalContent = content;
        IsVisible = true;

        StateHasChanged();
    }

    public void CloseModal()
    {
        ModalService.Close();
        CloseModal(ActionType.None, null);
    }

    public void CloseModal(ActionType actionType, object response)
    {
        IsVisible = false;
        ModalContent = null;

        StateHasChanged();
    }

    public void Dispose()
    {
        ModalService.OnShow -= ShowModal;
        ModalService.OnClose -= CloseModal;
    }
}