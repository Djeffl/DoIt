@inherits ComponentBase
@implements IDisposable

@using DoIt.Client.Services.Modals;


@inject ModalService ModalService;
<div>
	<div>
		<CascadingValue Value="this">
			@ChildContent
		</CascadingValue>
	</div>

	@if (IsVisible)
	{
		<div class="cascading-modal-wrapper" @onclick="() => CloseModal()">
			<div class="cascading-modal cascading-modal-center"  @onclick:stopPropagation="true">
				<div class="close-modal">
					<button @onclick="() => CloseModal()">X</button>
				</div>
				<div class="content-modal">
					@Content
				</div>
			</div>
		</div>
	}
</div>

@code {
	[Parameter] public RenderFragment ChildContent { get; set; }

	protected bool IsVisible { get; set; }
	protected RenderFragment Content { get; set; }

	protected override void OnInitialized()
	{
		ModalService.OnShow += ShowModal;
		ModalService.OnClose += CloseModal;
	}

	public void ShowModal(RenderFragment content)
	{
		Content = content;
		IsVisible = true;

		StateHasChanged();
	}

	public void CloseModal()
	{
		ModalService.Close();
		CloseModal(null);
	}

	public void CloseModal(object response)
	{
		IsVisible = false;
		Content = null;

		StateHasChanged();
	}

	public void Dispose()
	{
		ModalService.OnShow -= ShowModal;
		ModalService.OnClose -= CloseModal;
	}
}