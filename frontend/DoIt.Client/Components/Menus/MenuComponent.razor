@using DoIt.Client.Models.Icons
@using DoIt.Client.Components.Icons;
@using DoIt.Client.Models.General;
@using DoIt.Client.Models.Menus

<div class="menu">

    @foreach (var defaultActiveMenuItem in MenuItems.Where(x => x.DefaultActive))
    {
        <button class="defaultActiveItemButton" @onclick=defaultActiveMenuItem.OnClick>
            @defaultActiveMenuItem.Title
        </button>
    }

    @if (MenuItems.Any(x => !x.DefaultActive))
    {
        <button @onclick="ToggleMenu" @onclick:stopPropagation>
            <IconComponent Icon=@Icon Color=AppColor.Gray></IconComponent>
            @if (!string.IsNullOrEmpty(@Name))
            {
                <span>@Name</span>
            }
        </button>
        @if (_isOpen)
        {
            <div class="hidden-menu-overlay" @onclick="ToggleMenu">
                <div style=@_menuOverlayStyle class="menu-overlay">
                    <div style="width: 100%; height: 100%;" @onclick="CloseMenu">
                        @foreach (var option in MenuItems.Where(x => !x.DefaultActive))
                        {
                            <MenuItemComponent OnClick="() => option.OnClick()" Icon="@option.Icon" Title="@option.Title"></MenuItemComponent>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private string _menuOverlayStyle;

    private bool _isOpen = false;

    //[Parameter]
    //public RenderFragment MenuItems { get; set; }

    [Parameter]
    public IEnumerable<MenuOption> MenuItems { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public IconType Icon { get; set; }

    public void CloseMenu()
    {
        Console.WriteLine("Closing...");
        _isOpen = false;
        StateHasChanged();
    }

    public void OpenMenu(MouseEventArgs args)
    {
        _isOpen = true;
        _menuOverlayStyle = $"top: {args.ClientY}px; left: {args.ClientX - 185}px;";
        Console.WriteLine(JsonConvert.SerializeObject(args));
        StateHasChanged();
    }

    public void ToggleMenu(MouseEventArgs args)
    {
        if (_isOpen) CloseMenu();
        else OpenMenu(args);
    }
}
