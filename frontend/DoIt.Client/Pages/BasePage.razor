@using DoIt.Client.Components.Loading;
@using DoIt.Client.Models.Loading;
@using DoIt.Client.Services.Toast

@code {
    [Inject] public ToastService ToastService { get; set; }

    protected LoadingState LoadingState = LoadingState.Loading;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await base.OnInitializedAsync();
    }

    protected async Task LoadDataAsync()
    {
        try
        {
            await OnDataLoadingAsync();
            await RefreshDataAsync();
            await OnDataLoadedAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);

            await OnDataLoadedFailedAsync();
        }
    }

    protected abstract Task RefreshDataAsync();

    private Task OnDataLoadingAsync()
    {
        LoadingState = LoadingState.Loading;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnDataLoadedAsync()
    {
        LoadingState = LoadingState.Rendered;

        return Task.CompletedTask;
    }

    private Task OnDataLoadedFailedAsync()
    {
        LoadingState = LoadingState.Error;

        return Task.CompletedTask;
    }
}
