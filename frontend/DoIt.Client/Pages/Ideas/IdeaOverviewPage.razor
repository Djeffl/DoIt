@page "/ideas"

@using DoIt.Client.Models.Ideas;
@using DoIt.Client.Services.Ideas;
@using DoIt.Client.Pages.Ideas.Detail;

@using DoIt.Client.Services.Modals;

@using DoIt.Client.Services.Goals;

@using DoIt.Client.Components.Modals.Confirm;

@using System.Globalization;
@using DoIt.Client.Extensions
@using DoIt.Client.Models.General



@inject IIdeaService IdeaService;
@inject IGoalService GoalService;
@inject ModalService Modal;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage;

@if (Ideas == null)
{
	// Spinner Loading
}
else
{
    <section class="ideas">
		<ul class="ideas-list">
			@if (Ideas.Any())
			{
				@foreach (var idea in Ideas)
				{
					<li class="ideas-list-item" @onclick="() => OpenDetailGoal(idea.Id)">
						<article class="idea">
							<div class="idea-data">
								<div class="idea-title">
									@idea.Title
								</div>
								<div class="idea-description">
									@idea.Description
								</div>
								<div class="idea-date">
									@idea.CreatedAt.ToStringFormat()
								</div>
							</div>
						</article>
					</li>
				}
			}
		</ul>
	</section>
}

@code {
	public List<IdeaDto> Ideas { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var getIdeasResponse = await IdeaService.GetAllAsync();
		this.Ideas = getIdeasResponse.Data;

		Modal.OnClose += OnModalClose;
	}

	private async void OnModalClose(ActionType actionType, object response)
	{
		Console.WriteLine(JsonConvert.SerializeObject(response));
		if (actionType is ActionType.Create)
		{
		    var newIdea = response as IdeaDto;

			Ideas.Add(newIdea);
			StateHasChanged();
		}

	    if (actionType is ActionType.Update)
	    {
	        var updatedIdea = response as IdeaDto;
	        var idea = Ideas.FirstOrDefault(x => x.Id == updatedIdea.Id);
	        if (idea is not null)
	        {
	            idea.Title = updatedIdea.Title;
	            idea.Description = updatedIdea.Description;
	        }
	        StateHasChanged();
	    }

		if (actionType is ActionType.Delete)
		{
		    var deletedIdea = response as IdeaDto;

		    var idea = Ideas.FirstOrDefault(x => x.Id == deletedIdea.Id);

		    if (idea is not null)
		    {
		        Ideas.Remove(idea);
		        StateHasChanged();
		    }
		}
	}

    private void OpenDetailGoal(long id)
	{
		Modal.Show<IdeaDetailPage, IdeaDetailParameter>("Idea Details", new IdeaDetailParameter() { IdeaId = id });
	}
}
