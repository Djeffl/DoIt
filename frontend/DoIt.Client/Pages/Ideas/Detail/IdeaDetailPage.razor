@using DoIt.Client.Components.Buttons;
@using DoIt.Client.Models.Loading
@using DoIt.Client.Services.Ideas;
@using DoIt.Client.Components.Fields;
@using DoIt.Client.Models.Icons;
@using DoIt.Client.Models.General;
@using DoIt.Client.Models.Ideas;
@using DoIt.Client.Services.IdeaCategories;


@using DoIt.Client.Services.Modals;
@using DoIt.Client.Services.Goals;
@using DoIt.Interface.Goals
@using DoIt.Interface.IdeaCategory
@using DoIt.Interface.Ideas
@using Microsoft.AspNetCore.Components;
@using DoIt.Client.Components.Modals;


@inherits BaseModalComponent<IdeaDetailParameter>

@inject IIdeaService IdeaService;
@inject IGoalService GoalService;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage;
@inject ICategoryService IdeaCategoryService;
@inject ModalService ModalService;

<DoIt.Client.Components.Modals.ModalComponent Title="Idea Detail" CloseModal="() => CloseModal(ActionType.Cancel, Idea)" Options="Options">
    <Content>
        <DoIt.Client.Components.Loading.LoadingContainerComponent LoadingState="@LoadingState">
            <Rendered>
                <section class="idea-detail">
                    <DoIt.Client.Components.Ideas.IdeaFormComponent Idea="Idea" IdeaCategories="IdeaCategories"></DoIt.Client.Components.Ideas.IdeaFormComponent>
                </section>
                @if (Idea.GoalId.HasValue)
                {
                    <section class="idea-detail-goal">
                        <IconButton OnClick="() => ToGoal()" Width="auto" ButtonType="button" Icon="IconType.Goal" Text="To Goal"></IconButton>
                    </section>
                }
            </Rendered>
        </DoIt.Client.Components.Loading.LoadingContainerComponent>
    </Content>
</DoIt.Client.Components.Modals.ModalComponent>
