@using DoIt.Client.Components.Loading
@using DoIt.Client.Models.Goals;
@using DoIt.Client.Models.Menus
@using DoIt.Client.Services.Goals;
@using DoIt.Client.Components.Fields;
@using DoIt.Client.Components.Buttons;
@using DoIt.Client.Models.General
@using DoIt.Client.Models.Icons
@using DoIt.Client.Services.Ideas
@using DoIt.Client.Services.Modals
@using DoIt.Interface.Goals
@using Microsoft.AspNetCore.Components

@inherits BaseModalComponent<GoalCreateParameter>

@inject IGoalService GoalService;
@inject IIdeaService IdeaService;
@inject ModalService ModalService;


<DoIt.Client.Components.Modals.ModalComponent Title="Create Goal" CloseModal="() => CloseModal()" Options="Options">
    <Content>
        <LoadingContainerComponent LoadingState="LoadingState">
            <Rendered>
                <article class="goal-detail">
                    <DoIt.Client.Components.Goals.GoalFormComponent Goal="Goal">
                    </DoIt.Client.Components.Goals.GoalFormComponent>
                </article>
            </Rendered>
        </LoadingContainerComponent>
    </Content>
</DoIt.Client.Components.Modals.ModalComponent>

@code {
    public Models.Goals.GoalFormDto Goal = new Models.Goals.GoalFormDto()
        {
            DueAt = DateTime.Now
        };

    public IEnumerable<MenuOption> Options { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Options = new List<MenuOption>()
        {
            new MenuOption()
            {
                Title = "Create",
                Icon = Models.Icons.IconType.Delete,
                OnClick = async () => await this.CreateGoalAsync(Goal),
                DefaultActive = true
            },
        };
    }

    protected override async Task LoadDataAsync()
    {
        if (Parameter != null)
        {
            var idea = await IdeaService.GetAsync(Parameter.IdeaId);

            Goal.IdeaId = idea.Id;
            Goal.Title = idea.Title;
            Goal.Description = idea.Description;
            Goal.CategoryIds = idea.Categories.Select(x => x.Id).ToList();
        }

        await base.LoadDataAsync();
    }

    private async Task CreateGoalAsync(GoalFormDto goal)
    {
        var response = await GoalService.CreateGoalAsync(goal.ToService());

        CloseModal(ActionType.Create, response);
    }
}
