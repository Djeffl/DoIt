@using DoIt.Client.Components.Loading
@using DoIt.Client.Models.Goals;
@using DoIt.Client.Models.Menus
@using DoIt.Client.Services.Goals;
@using DoIt.Client.Components.Fields;
@using DoIt.Client.Components.Buttons;
@using DoIt.Client.Models.General
@using DoIt.Client.Models.Icons
@using DoIt.Client.Services.IdeaCategories
@using DoIt.Client.Services.Ideas
@using DoIt.Client.Services.Modals
@using DoIt.Interface.Goals
@using DoIt.Interface.IdeaCategory
@using DoIt.Interface.Ideas
@using Microsoft.AspNetCore.Components

@inherits BaseModalComponent<GoalCreateParameter>
@implements IDisposable;

@inject IGoalService GoalService;
@inject IIdeaService IdeaService;
@inject ModalService ModalService;
@inject ICategoryService CategoryService;



<DoIt.Client.Components.Modals.ModalComponent Title="Create Goal" CloseModal="() => CloseModal()" Options="Options">
    <Content>
        <LoadingContainerComponent LoadingState="LoadingState">
            <Rendered>
                <article class="goal-detail">
                    <DoIt.Client.Components.Goals.GoalFormComponent Goal="Goal">
                    </DoIt.Client.Components.Goals.GoalFormComponent>
                </article>
            </Rendered>
        </LoadingContainerComponent>
    </Content>
</DoIt.Client.Components.Modals.ModalComponent>

@code {
    public Models.Goals.GoalFormDto Goal = new Models.Goals.GoalFormDto()
        {
            DueAt = DateTime.Now
        };

    public IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();

    public IEnumerable<MenuOption> Options { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Options = new List<MenuOption>()
        {
            new MenuOption()
            {
                Title = "Create",
                Icon = Models.Icons.IconType.Delete,
                OnClick = async () => await this.CreateGoalAsync(Goal),
                DefaultActive = true
            },
        };
    }

    protected override async Task LoadDataAsync()
    {
        if (Parameter != null)
        {
            var idea = await IdeaService.GetAsync(Parameter.IdeaId);

            Goal.IdeaId = idea.Id;
            Goal.Title = idea.Title;
            Goal.Description = idea.Description;
            Goal.CategoryIds = idea.Categories.Select(x => x.Id).ToList();
            Goal.CategoryNames = idea.Categories.Select(x => x.Name).ToList();
        }

        Categories = await GetCategoriesAsync();

        await base.LoadDataAsync();
    }

    private async Task<IEnumerable<CategoryDto>> GetCategoriesAsync()
    {
        var categoriesDto = await CategoryService.GetListAsync();
        return categoriesDto.Data;
    }

    private async Task CreateGoalAsync(GoalFormDto goal)
    {
        var response = await GoalService.CreateGoalAsync(goal.ToService());

        CloseModal(ActionType.Create, response);
    }

    private async Task SetIdeaCategoryIdsAsync()
    {
        var categories = new List<CategoryDto>();

        if (!Goal.CategoryNames.Any())
        {
            Goal.CategoryIds = new List<long>();
            return;
        }

        var newCategories = Goal.CategoryNames.Where(categoryName => !Categories.Any(existingCategory => categoryName == existingCategory.Name));

        if (newCategories.Any())
        {
            var bulkNewCategories = await AddNewIdeaCategoryBulkAsync(newCategories);
            categories.AddRange(bulkNewCategories.Data);
        }

        categories.AddRange(Categories.Where(existingCategory => Goal.CategoryNames.Any(name => name == existingCategory.Name)));
        Goal.CategoryIds = categories.Select(selectedCategory => selectedCategory.Id);

        await LoadDataAsync();
    }

    private async Task<CategoriesDto> AddNewIdeaCategoryBulkAsync(IEnumerable<string> categoryNames)
    {
        return await CategoryService.CreateBulkAsync(new CreateCategoryBulkDto
            {
                Categories = categoryNames.Select(name => new CreateCategoryDto()
                {
                    Name = name
                })
            });
    }

    public void Dispose()
    {
    }
}
