@page "/goals/create"

@using DoIt.Client.Components.Loading
@using DoIt.Client.Models.Goals;
@using DoIt.Client.Services.Goals;
@using DoIt.Client.Components.Fields;
@using DoIt.Client.Components.Buttons;
@using DoIt.Client.Models.General
@using DoIt.Client.Models.Icons
@using DoIt.Client.Services.Modals
@using DoIt.Interface.Goals
@using Microsoft.AspNetCore.Components

@inherits BaseModalComponent<GoalCreateParameter>

@inject IGoalService GoalService;
@inject ModalService ModalService;


<DoIt.Client.Components.Modals.ModalComponent Title="Create Goal" CloseModal="() => ModalService.Close()">
    <Content>
        <LoadingContainerComponent LoadingState="LoadingState">
            <Rendered>
                <article class="goal-detail">
                    <DoIt.Client.Components.Goals.GoalFormComponent>
                        <Actions>
                            <div class="actions">
                                <IconButton OnClick="() => CloseModal()" Text="Cancel" Color="AppColor.Gray" ButtonType="button" Icon="IconType.Cancel">
                                </IconButton>
                                <IconButton Text="Create" Color="AppColor.Yellow" ButtonType="submit" Icon="IconType.Goal">
                                </IconButton>
                            </div>
                        </Actions>
                    </DoIt.Client.Components.Goals.GoalFormComponent>
                </article>
            </Rendered>
        </LoadingContainerComponent>
    </Content>
</DoIt.Client.Components.Modals.ModalComponent>

@code {
    public Models.Goals.CreateGoalDto Goal = new Models.Goals.CreateGoalDto()
        {
            DueAt = DateTime.Now
        };

    //private List<string> options = ((GoalType[])Enum.GetValues(typeof(GoalType))).Select(t => t.ToString()).ToList();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //Console.WriteLine(JsonConvert.SerializeObject(Parameter));
        //if (Parameter != null && Parameter.Idea != null)
        //{
        //	this.NewGoal.IdeaId = Parameter.Idea.Id;
        //	this.NewGoal.Title = Parameter.Idea.Title;
        //	this.NewGoal.Description = Parameter.Idea.Description;
        //}
    }

    private async Task CreateGoalAsync()
    {
        var response = await GoalService.CreateGoalAsync(Goal.ToService());

        Console.WriteLine("Closing MOdal...");
        CloseModal(ActionType.Create, response);
    }
}
