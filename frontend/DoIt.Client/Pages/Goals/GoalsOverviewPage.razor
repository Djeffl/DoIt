@page "/goals"
@page "/goals/{id:long}"

@using DoIt.Client.Components.Loading
@using DoIt.Client.Models.Modals
@using DoIt.Client.Pages.Goals.Detail
@using Services.Goals;
@using DoIt.Client.Components.Goals;
@using Blazored.SessionStorage;
@using DoIt.Client.Models.General
@using DoIt.Client.Services.Modals;
@using DoIt.Client.Pages.Goals.Create;
@using DoIt.Interface.Goals
@using DoIt.Interface.Ideas

@inherits BaseComponent;
@implements IDisposable;

@inject IGoalService GoalService;
@inject NavigationManager NavManager;
@inject ISessionStorageService SessionStorage;
@inject ModalService ModalService;


<LoadingContainerComponent LoadingState="LoadingState">
    <Rendered>
        <section class="goals">
            @foreach (var goal in Goals)
            {
                <GoalComponent Goal="goal"></GoalComponent>
            }
        </section>
    </Rendered>
</LoadingContainerComponent>


@code {
    [Parameter]
    public long? Id { get; set; }

    public List<GoalDto> Goals;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ModalService.OnClose += OnModalClose;
    }

    protected override async Task LoadDataAsync()
    {
        var getGoalsResponse = await GoalService.GetAllAsync();
        Goals = getGoalsResponse.Data.ToList();
        StateHasChanged();

        if (Id.HasValue)
        {
            ModalService.Show(new ModalBuilder()
                .AddComponent<GoalDetailPage, GoalDetailParameter>(new GoalDetailParameter() { GoalId = Id.Value })
                .AddConfiguration(new ModalConfiguration() { FullScreen = true })
                .Build());
        }
    }

    private async void OnModalClose(ActionType actionType, object response, Guid id)
    {
        switch (actionType)
        {
            case ActionType.Create:
                await LoadDataAsync();
                break;
            case ActionType.Update:
                await LoadDataAsync();
                break;
            case ActionType.Delete:
                await LoadDataAsync();
                break;
        }
    }

    public void Dispose()
    {
        ModalService.OnClose -= OnModalClose;
    }
}
