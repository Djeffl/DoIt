@page "/goals/{GoalId}"

@using DoIt.Client.Components.Buttons;
@using DoIt.Client.Components.Modals.Confirm
@using DoIt.Client.Extensions
@using DoIt.Client.Models.Loading
@using DoIt.Client.Models.Menus
@using DoIt.Client.Models.Modals
@using DoIt.Client.Services.Ideas;
@using DoIt.Client.Components.Fields;
@using DoIt.Client.Models.Icons;
@using DoIt.Client.Models.General;
@using DoIt.Client.Models.Ideas;
@using DoIt.Client.Services.IdeaCategories;
@using DoIt.Client.Models.Goals;
@using DoIt.Client.Services.Goals;
@using DoIt.Client.Models.ActionPlan;
@using DoIt.Client.Models.Todos;
@using DoIt.Client.Services.Todos;
@using DoIt.Client.Services.Modals;
@using DoIt.Client.Components.Carousels;
@using DoIt.Interface.Goals

@inject ITodoService TodoService;
@inject IGoalService GoalService;
@inject NavigationManager NavManager;
@inject ModalService ModalService;


@inherits BaseModalComponent<GoalDetailParameter>

<DoIt.Client.Components.Modals.ModalComponent Title="Goal Detail" CloseModal="() => CloseModal(ActionType.Cancel, Goal)" Options="Options">
    <Content>
        <DoIt.Client.Components.Loading.LoadingContainerComponent LoadingState="@LoadingState">
            <Rendered>
                <EditForm style="height: 100%" Model="Goal" OnValidSubmit="UpdateGoalAsync">

                    <CarouselComponent>
                        <CarouselItemComponent>
                            <div class="fields">
                                @* What is this? *@
                                <DataAnnotationsValidator />
                                <div class="field title-field">
                                    <TextField @bind-Value="Goal.Title" Label="Title" IsMandatory="true" Width="100%"
                                               ValidationFor="@(() => Goal.Title)" />
                                </div>
                                <div class="field description-field">
                                    <TextField @bind-Value="Goal.Description" Label="Description" Multiline="true" Width="100%"
                                               ValidationFor="@(() => Goal.Description)" />
                                </div>
                                <div class="field location-field">
                                    <TextField @bind-Value="Goal.Location" Label="Location" Multiline="false" Width="100%"
                                               ValidationFor="@(() => Goal.Location)" />
                                </div>
                                <div class="field reason-field">
                                    <TextField @bind-Value="Goal.Reason" Label="Reason" Multiline="true" Width="100%"
                                               ValidationFor="@(() => Goal.Reason)" />
                                </div>
                                @*<div class="field type-field">
                                <TextField @bind-Value="Goal.Type" Label="Type" Multiline="false" Width="100%"
                                />
                                </div>*@
                                <div class="field due-at-field">
                                    <DateField @bind-Value="Goal.DueAt" Label="Due at" Multiline="false" Width="100%"
                                               ValidationFor="@(() => Goal.DueAt)" />
                                </div>


                            </div>
                        </CarouselItemComponent>
                        <CarouselItemComponent>
                            <div class="action-plan">
                                <div class="action-plan-header">
                                    <Label Title="Action Plan"></Label>
                                    <IconButton Background="false" ButtonType="button" Height="2.5rem" width="2.5rem" Color="AppColor.Red" Icon="IconType.Add" OnClick="NewActionPlanItem">
                                    </IconButton>
                                </div>
                                <div class="action-plan-content">
                                    @if (Goal.ActionPlan.Any())
                                    {
                                        <table class="action-plan-table-list">
                                            <tbody>
                                                @foreach (var task in Goal.ActionPlan)
                                                {
                                                    <tr class="action-plan-table-item">
                                                        <td class="data is-finished">
                                                            <div class="internal">
                                                                <CheckboxField Checked="@task.IsFinished" OnCheckChangedCallback="async (e) => await ChangeTaskProgressAsync(e)" />
                                                            </div>
                                                        </td>
                                                        <td class="title data">
                                                            <div class="internal">
                                                                <TextField @bind-Value="@task.Title" Placeholder="Title" Multiline="false"></TextField>
                                                            </div>
                                                        </td>
                                                        @*<td class="due-at data">
                                                            <div class="internal">
                                                                @task.DueAt.ToStringFormat()
                                                            </div>
                                                        </td>*@
                                                        <td class="delete-action action data">
                                                            <div class="internal">
                                                                <IconButton Width="7px" Height="7px" Icon="IconType.Delete" OnClick="() => DeleteActionPlanItem(task)"></IconButton>
                                                            </div>
                                                        </td>
                                                        @*<td>
                                                @task.repetition
                                                </td>*@
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            </div>
                        </CarouselItemComponent>
                    </CarouselComponent>
                </EditForm>
            </Rendered>
        </DoIt.Client.Components.Loading.LoadingContainerComponent>
    </Content>
</DoIt.Client.Components.Modals.ModalComponent>

@code {


    public GoalDetail Goal { get; set; }

    private readonly List<string> _actionTypes = new() { "Task" }; //"Routine"
    public IEnumerable<MenuOption> Options;

    private List<RenderFragment> components = new List<RenderFragment>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ModalService.OnClose += OnModalClose;

        Options = new List<MenuOption>()
            {
                new MenuOption()
                {
                    Title = "Delete",
                    Icon = Models.Icons.IconType.Delete,
                    OnClick = () => this.StartDeleteGoal()
                },
                new MenuOption()
                {
                    Title = "Save",
                    OnClick= async () => await UpdateGoalAsync(),
                    DefaultActive = true
                }
            };

        Goal = await GoalService.GetGoalByIdAsync(Parameter.GoalId);
        this.StateHasChanged();
    }



    private void OnModalClose(ActionType actionType, object response, Guid id)
    {

        if (actionType == ActionType.Confirm)
        {
            var confirmDelete = (bool)response;

            if (confirmDelete)
            {
                DeleteGoal();
            }
        }
    }

    private Task ChangeTaskProgressAsync(ChangeEventArgs eventArgs)
    {
        var isCompleted = (bool)eventArgs.Value;
        Console.WriteLine($"Task is completed: {isCompleted}");
        return Task.CompletedTask;
    }

    public async Task UpdateGoalAsync()
    {
        await GoalService.UpdateGoalAsync(Goal.Id, new UpdateGoalRequest()
            {
                Description = Goal.Description,
                DueAt = Goal.DueAt,
                Location = Goal.Location,
                Reason = Goal.Reason,
                Title = Goal.Title,
                ActionPlan = Goal.ActionPlan.Select(item => new GoalTodoDto()
                {
                    IsFinished = item.IsFinished,
                    Title = item.Title,
                    DueAt = item.DueAt,
                    Id = item.Id
                }),
            });

        CloseModal(ActionType.Update, Goal);
    }

    private void NewActionPlanItem()
    {
        var newTodo = new TodoDto();

        Goal.ActionPlan.Reverse();
        Goal.ActionPlan.Add(newTodo);
        Goal.ActionPlan.Reverse();
        this.StateHasChanged();
    }

    private void AddNewActionPlan()
    {
        //var newTodo = await GoalService.CreateGoalTodoAsync(Goal.Id, new CreateTodoDto()
        //    {
        //        Title = ActionPlanItem.Title,
        //    });

        var newTodo = new TodoDto();

        Goal.ActionPlan.Add(newTodo);
        this.StateHasChanged();
    }

    private void DeleteActionPlanItem(TodoDto todo)
    {
        Goal.ActionPlan.Remove(todo);
        this.StateHasChanged();
    }

    private void StartDeleteGoal()
    {
        ModalService.Show(new ModalBuilder()
            .AddComponent<ConfirmModalComponent, ConfirmModalParameter>(new ConfirmModalParameter() { Description = "Are you sure you wish to delete this idea?" })
            .AddConfiguration(new ModalConfiguration() { FullScreen = false })
            .Build());
    }

    private async void DeleteGoal()
    {
        await GoalService.DeleteGoalAsync(Goal.Id);
        CloseModal(ActionType.Delete, Goal.Id);
    }
}
